{
  "root": true,
  "ignorePatterns": ["projects/**/*"],
  "overrides": [
    {
      "files": ["*.ts"],
      "parserOptions": {
        "project": ["tsconfig.json"],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:prettier/recommended"
      ],
      "rules": {
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "t",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "t",
            "style": "kebab-case"
          }
        ],
        "@typescript-eslint/explicit-member-accessibility": "off",
        // JavaScript hoists functions to the top, so it should not be an error.
        "@typescript-eslint/no-use-before-define": "off",
        // Explicit function return types increase the readability, so they should always be included.
        "@typescript-eslint/explicit-function-return-type": "error",
        // TS ignore is needed for external libraries that are not typed.
        "@typescript-eslint/ban-ts-comment": "off",
        // Empty function are needed for tests to override functionality.
        "@typescript-eslint/no-empty-function": "off",
        // Everything should have a type. If not possible disable eslint for the line and case.
        "@typescript-eslint/no-explicit-any": "error",
        // Unused vars can be removed without problems.
        "@typescript-eslint/no-unused-vars": "error",
        // Useless constructor can be removed without problems.
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "variable",
            "format": ["camelCase"]
          },
          {
            "selector": "property",
            "modifiers": ["static"],
            "format": ["camelCase"]
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          {
            "selector": "enumMember",
            "format": ["UPPER_CASE"]
          },
          {
            "selector": "function",
            "format": ["camelCase", "PascalCase"]
          },
          {
            "selector": "variable",
            "modifiers": ["const"],
            // PascalCase only for custom objects, UPPER_CASE only for CONSTANTS
            "format": ["camelCase", "PascalCase", "UPPER_CASE"]
          }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "error"
        // explicit return and argument types
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {}
    },
    {
      "files": ["*.html"],
      "excludedFiles": ["*inline-template-*.component.html"],
      "extends": ["plugin:prettier/recommended"],
      "rules": {
        "prettier/prettier": ["error", { "parser": "angular" }]
      }
    }
  ]
}
